#!/usr/bin/env node
const { writeFileSync } = require('fs');
const { EOL } = require('os');
const yargs = require('yargs/yargs');
const parseCsvFile = require('@fast-csv/parse').parseFile;

async function run(options){
    const socOutput = await parseCSVData(options.socfile); 
    const clocOutput = await parseCSVData(options.clocfile);
    const clocWithoutSum = getClocWithoutSumRow(clocOutput);
    const combinedLines = clocWithoutSum.map((clocRow) => buildCombinedRow(clocRow, socOutput));
    combinedLines.unshift('filename,soc,lines');
    writeFileSync(options.output, combinedLines.join(EOL), 'UTF8');
}

function getClocWithoutSumRow(clocOutput){
    return clocOutput.filter((cloc) => {
        return cloc.language !== 'SUM'
    });
}

function buildCombinedRow(clocRow, socOutput){
    const fileName = clocRow.filename;
    const matchingSocEntry = socOutput.find((socEntry) => {
        return socEntry.entity === fileName;
    });
    const soc = matchingSocEntry ? matchingSocEntry.soc : 0;
    return `${fileName},${soc},${clocRow.code}`;
}

async function parseCSVData(filename){
    const rows = [];
    return new Promise((resolve, reject) => {
        parseCsvFile(filename, { headers: true })
            .on('data', row => rows.push(row))
            .on('end', () => resolve(rows))
            .on('error', reject);
    });
}

const arguments = yargs(process.argv.slice(2)).argv;
run(arguments);